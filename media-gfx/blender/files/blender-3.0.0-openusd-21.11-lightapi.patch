From:  https://developer.blender.org/D13629
Replaced changes for usd_writer_light.cc because of operator=() problems.
diff --git a/source/blender/io/usd/intern/usd_reader_light.cc b/source/blender/io/usd/intern/usd_reader_light.cc
--- a/source/blender/io/usd/intern/usd_reader_light.cc
+++ b/source/blender/io/usd/intern/usd_reader_light.cc
@@ -25,7 +25,7 @@
 #include "DNA_light_types.h"
 #include "DNA_object_types.h"
 
-#include <pxr/usd/usdLux/light.h>
+#include <pxr/usd/usdLux/lightAPI.h>
 
 #include <pxr/usd/usdLux/diskLight.h>
 #include <pxr/usd/usdLux/distantLight.h>
@@ -57,7 +57,7 @@
     return;
   }
 
-  pxr::UsdLuxLight light_prim(prim_);
+  pxr::UsdLuxLightAPI light_prim(prim_);
 
   if (!light_prim) {
     return;
diff --git a/source/blender/io/usd/intern/usd_reader_stage.cc b/source/blender/io/usd/intern/usd_reader_stage.cc
--- a/source/blender/io/usd/intern/usd_reader_stage.cc
+++ b/source/blender/io/usd/intern/usd_reader_stage.cc
@@ -34,7 +34,7 @@
 #include <pxr/usd/usdGeom/nurbsCurves.h>
 #include <pxr/usd/usdGeom/scope.h>
 #include <pxr/usd/usdGeom/xform.h>
-#include <pxr/usd/usdLux/light.h>
+#include <pxr/usd/usdLux/lightAPI.h>
 
 #include <iostream>
 
@@ -71,7 +71,7 @@
   if (params_.import_meshes && prim.IsA<pxr::UsdGeomMesh>()) {
     return new USDMeshReader(prim, params_, settings_);
   }
-  if (params_.import_lights && prim.IsA<pxr::UsdLuxLight>()) {
+  if (params_.import_lights && prim.IsA<pxr::UsdLuxLightAPI>()) {
     return new USDLightReader(prim, params_, settings_);
   }
   if (params_.import_volumes && prim.IsA<pxr::UsdVolVolume>()) {
@@ -98,7 +98,7 @@
   if (prim.IsA<pxr::UsdGeomMesh>()) {
     return new USDMeshReader(prim, params_, settings_);
   }
-  if (prim.IsA<pxr::UsdLuxLight>()) {
+  if (prim.IsA<pxr::UsdLuxLightAPI>()) {
     return new USDLightReader(prim, params_, settings_);
   }
   if (prim.IsA<pxr::UsdVolVolume>()) {
--- a/source/blender/io/usd/intern/usd_writer_light.cc.orig	2021-10-27 11:46:39.000000000 -0700
+++ b/source/blender/io/usd/intern/usd_writer_light.cc	2022-01-26 12:27:04.499364774 -0800
@@ -49,7 +49,8 @@ void USDLightWriter::do_write(HierarchyC
   pxr::UsdTimeCode timecode = get_export_time_code();
 
   Light *light = static_cast<Light *>(context.object->data);
-  pxr::UsdLuxLight usd_light;
+  pxr::UsdLuxBoundableLightBase usd_light_boundable;
+  pxr::UsdLuxNonboundableLightBase usd_light_not_boundable;
 
   switch (light->type) {
     case LA_AREA:
@@ -58,21 +59,21 @@ void USDLightWriter::do_write(HierarchyC
         case LA_AREA_ELLIPSE: { /* An ellipse light will deteriorate into a disk light. */
           pxr::UsdLuxDiskLight disk_light = pxr::UsdLuxDiskLight::Define(stage, usd_path);
           disk_light.CreateRadiusAttr().Set(light->area_size, timecode);
-          usd_light = disk_light;
+          usd_light_boundable = disk_light;
           break;
         }
         case LA_AREA_RECT: {
           pxr::UsdLuxRectLight rect_light = pxr::UsdLuxRectLight::Define(stage, usd_path);
           rect_light.CreateWidthAttr().Set(light->area_size, timecode);
           rect_light.CreateHeightAttr().Set(light->area_sizey, timecode);
-          usd_light = rect_light;
+          usd_light_boundable = rect_light;
           break;
         }
         case LA_AREA_SQUARE: {
           pxr::UsdLuxRectLight rect_light = pxr::UsdLuxRectLight::Define(stage, usd_path);
           rect_light.CreateWidthAttr().Set(light->area_size, timecode);
           rect_light.CreateHeightAttr().Set(light->area_size, timecode);
-          usd_light = rect_light;
+          usd_light_boundable = rect_light;
           break;
         }
       }
@@ -80,11 +81,11 @@ void USDLightWriter::do_write(HierarchyC
     case LA_LOCAL: {
       pxr::UsdLuxSphereLight sphere_light = pxr::UsdLuxSphereLight::Define(stage, usd_path);
       sphere_light.CreateRadiusAttr().Set(light->area_size, timecode);
-      usd_light = sphere_light;
+      usd_light_boundable = sphere_light;
       break;
     }
     case LA_SUN:
-      usd_light = pxr::UsdLuxDistantLight::Define(stage, usd_path);
+      usd_light_not_boundable = pxr::UsdLuxDistantLight::Define(stage, usd_path);
       break;
     default:
       BLI_assert_msg(0, "is_supported() returned true for unsupported light type");
@@ -101,10 +102,19 @@ void USDLightWriter::do_write(HierarchyC
   else {
     usd_intensity = light->energy / 100.0f;
   }
-  usd_light.CreateIntensityAttr().Set(usd_intensity, timecode);
-
-  usd_light.CreateColorAttr().Set(pxr::GfVec3f(light->r, light->g, light->b), timecode);
-  usd_light.CreateSpecularAttr().Set(light->spec_fac, timecode);
+  switch (light->type) {
+    case LA_AREA:
+    case LA_LOCAL:
+      usd_light_boundable.CreateIntensityAttr().Set(usd_intensity, timecode);
+      usd_light_boundable.CreateColorAttr().Set(pxr::GfVec3f(light->r, light->g, light->b), timecode);
+      usd_light_boundable.CreateSpecularAttr().Set(light->spec_fac, timecode);
+      break;
+    case LA_SUN:
+      usd_light_not_boundable.CreateIntensityAttr().Set(usd_intensity, timecode);
+      usd_light_not_boundable.CreateColorAttr().Set(pxr::GfVec3f(light->r, light->g, light->b), timecode);
+      usd_light_not_boundable.CreateSpecularAttr().Set(light->spec_fac, timecode);
+      break;
+  }
 }
 
 }  // namespace blender::io::usd
