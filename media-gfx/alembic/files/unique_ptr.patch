From a9230743220cdc27dcb80ded99f2ff28c7092833 Mon Sep 17 00:00:00 2001
From: Lucas <lmiller@imageworks.com>
Date: Tue, 3 May 2016 14:05:48 -0700
Subject: [PATCH] Address comment in issue 37.

unique_ptr isn't always available in older boost versions so fall back on our
custom rolled unique_ptr.

If tr1 is NOT explicitly chosen, then make sure the compiler we are using is
set to use C++11 before trying to use atomics.
---
 lib/Alembic/AbcCoreOgawa/StreamManager.cpp |  2 +-
 lib/Alembic/AbcCoreOgawa/StreamManager.h   |  4 ++--
 lib/Alembic/Util/Foundation.h              | 25 +++++++++++++++----------
 3 files changed, 18 insertions(+), 13 deletions(-)

diff --git a/lib/Alembic/AbcCoreOgawa/StreamManager.cpp b/lib/Alembic/AbcCoreOgawa/StreamManager.cpp
index 462ab03..71e9527 100644
--- a/lib/Alembic/AbcCoreOgawa/StreamManager.cpp
+++ b/lib/Alembic/AbcCoreOgawa/StreamManager.cpp
@@ -43,7 +43,7 @@ namespace ALEMBIC_VERSION_NS {
 // Lets define a compare exchange macro for use below
 
 // C++11 std::atomics version
-#if !defined( ALEMBIC_LIB_USES_TR1 )
+#if !defined( ALEMBIC_LIB_USES_TR1 ) && __cplusplus >= 201103L
 #define COMPARE_EXCHANGE( V, COMP, EXCH ) V.compare_exchange_weak( COMP, EXCH, std::memory_order_seq_cst, std::memory_order_seq_cst )
 // Windows
 #elif defined( _MSC_VER )
diff --git a/lib/Alembic/AbcCoreOgawa/StreamManager.h b/lib/Alembic/AbcCoreOgawa/StreamManager.h
index e39d7da..2a6dd1e 100644
--- a/lib/Alembic/AbcCoreOgawa/StreamManager.h
+++ b/lib/Alembic/AbcCoreOgawa/StreamManager.h
@@ -40,7 +40,7 @@
 #include <Alembic/AbcCoreOgawa/Foundation.h>
 #include <Alembic/Util/Foundation.h>
 
-#if !defined(ALEMBIC_LIB_USES_TR1)
+#if !defined(ALEMBIC_LIB_USES_TR1) && __cplusplus >= 201103L
 #include <atomic>
 #endif
 
@@ -70,7 +70,7 @@ class StreamManager : Alembic::Util::noncopyable
     Alembic::Util::mutex m_lock;
 
     // for the CAS impl
-#if !defined(ALEMBIC_LIB_USES_TR1)
+#if !defined(ALEMBIC_LIB_USES_TR1) && __cplusplus >= 201103L
     std::atomic< Alembic::Util::int64_t > m_streams;
 #else
     Alembic::Util::int64_t m_streams;
diff --git a/lib/Alembic/Util/Foundation.h b/lib/Alembic/Util/Foundation.h
index 30e4385..18d30dd 100644
--- a/lib/Alembic/Util/Foundation.h
+++ b/lib/Alembic/Util/Foundation.h
@@ -44,7 +44,6 @@
 #include <boost/format.hpp>
 #include <boost/smart_ptr.hpp>
 #include <boost/static_assert.hpp>
-#include <boost/scoped_ptr.hpp>
 #include <boost/utility.hpp>
 #include <boost/cstdint.hpp>
 #include <boost/array.hpp>
@@ -129,7 +128,6 @@ using boost::shared_ptr;
 using boost::static_pointer_cast;
 using boost::weak_ptr;
 using boost::unordered_map;
-using boost::unique_ptr;
 
 #elif defined(ALEMBIC_LIB_USES_TR1)
 using std::tr1::dynamic_pointer_cast;
@@ -139,6 +137,21 @@ using std::tr1::static_pointer_cast;
 using std::tr1::weak_ptr;
 using std::tr1::unordered_map;
 
+#else
+using std::dynamic_pointer_cast;
+using std::enable_shared_from_this;
+using std::shared_ptr;
+using std::static_pointer_cast;
+using std::weak_ptr;
+using std::unordered_map;
+using std::unique_ptr;
+#endif
+
+#if defined(ALEMBIC_LIB_USES_BOOST) || defined(ALEMBIC_LIB_USES_TR1)
+
+// define a very simple scoped ptr since unique_ptr isn't consistently
+// available on boost versions.  Otherwise we could use boost::scoped_ptr
+// or the deprecated std::auto_ptr for tr1.
 template<typename T>
 class unique_ptr : noncopyable
 {
@@ -177,14 +190,6 @@ class unique_ptr : noncopyable
     T* p;
 };
 
-#else
-using std::dynamic_pointer_cast;
-using std::enable_shared_from_this;
-using std::shared_ptr;
-using std::static_pointer_cast;
-using std::weak_ptr;
-using std::unordered_map;
-using std::unique_ptr;
 #endif
 
 // similiar to boost::totally_ordered
